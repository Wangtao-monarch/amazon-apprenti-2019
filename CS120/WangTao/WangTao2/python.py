# author：1917494051WangTao 1917494031ZhangJunwei 1917494045ChenHaoran
#PythonRealization: greedy snake
'''
Game play: enter to start the game; Pause / resume the game in the space; The direction key / WSAD controls the direction of the snake
'''
'''
Idea: store the snake's body in a list; The body is represented by light color, and the body is highlighted by dark background;
The movement of the snake: carefully observe that the body does not move except the head and tail, the tail disappears, and the head increases. 
Therefore, the newly added elements are placed at the head of the list and the tail elements are deleted;
Game end decision strategy: beyond the boundary; Touch your body: the next grid the snake moves forward is part of your body (i.e. in the list).
'''
#Note: because elements need to be added and deleted frequently in the list, deque container is used to replace the list; Because deque has efficient insertion and deletion efficiency
#The initialization snake, with a length of 3, is placed in the upper left corner of the screen;
#Guide Package
import random
import sys
import time
import pygame
from pygame.locals import *
from collections import deque
#Basic settings
Screen_Height=480
Screen_Width=600
Size=20#Small square size
Line_Width=1
#Coordinate range of the game area
Area_x=(0,Screen_Width//Size-1) #0 is the left boundary and 1 is the right boundary # note: in Python / / is integer division/ Divide floating point numbers
Area_y=(2,Screen_Height//Size-1)
#Preliminary setting of food
#Food score + Color
Food_Style_List=[(10,(255,100,100)),(20,(100,255,100)),(30,(100,100,255))]
#Overall color setting
Light=(100,100,100)
Dark=(200,200,200)
Black=(0,0,0)
Red=(200,30,30)
Back_Ground=(40,40,60)
#Text output formatting
def Print_Txt(screen,font,x,y,text,fcolor=(255,255,255)):
#font. Meaning of render parameter: Render (content, anti aliasing, font color, font background color)
    Text=font.render(text,True,fcolor)
    screen.blit(Text,(x,y))
#Initialize snake
def init_snake():
    snake=deque()
    snake.append((2,Area_y[0]))
    snake.append((1,Area_y[0]))
    snake.append((0,Area_y[0]))
    return snake
#Food settings
#Note that it is necessary to judge the presence of food on the snake
def Creat_Food(snake):
    '''
    Note: the random number interval generated by randInt contains left and right limits
    In other words, the left and right are closed interval [1, n], which can take 1 and n.
    The random number interval generated by randrange contains only the left limit,
    That is, for [1, n), which is closed on the left and open on the right, 1 can be taken, but n cannot be taken.
    The random number generated by randInt is a value within a specified interval,
    The random number generated by randrange can set a step, that is, an interval.
    '''
    food_x=random.randint(Area_x[0],Area_x[1]) #There are questions here
    food_y=random.randint(Area_y[0],Area_y[1])
    #If the food appears on the snake, start again;
    while(food_x,food_y)in snake:
        food_x = random.randint(Area_x[0], Area_x[1])
        food_y = random.randint(Area_y[[0], Area_y[1]])
    return food_x,food_y
#Food style
def Food_Style():
    return Food_Style_List[random.randint(0,2)] #Returns a random score and color
def main():
    pygame.init()
    screen=pygame.display.set_mode((Screen_Width,Screen_Height)) #Initializes a window or screen to be displayed
    pygame.display.set_caption('贪吃蛇') #Set the current window caption
    #Score font setting
    font1=pygame.font.SysFont('SimHei',24)
    #Go font settings
    font2 = pygame.font.SysFont(None, 72)
    fwidth, fheight = font2.size('GAME OVER')
    #b variable to prevent this from happening
    b=True
    #Snake
    snake=init_snake()
    #Food
    food=Creat_Food(snake)
    food_style=Food_Style()
    #Direction control
    pos=(1,0) 
    #Start game related variable initialization
    game_over=True  #End flag
    game_start=False    #Start flag
    score=0 #Score
    orispeed=0.3  #Snake initial speed
    speed=orispeed  #Snake speed
    last_move_time=None
    pause=False #Pause
    while True:
        for event in pygame.event.get():
            if event.type==QUIT:
                sys.exit()
            elif event.type==KEYDOWN:
                if event.key==K_RETURN:
                    if game_over:
                        game_start=True
                        game_over=False
                        b=True
                        snake=init_snake()
                        food=Creat_Food(snake)
                        food_style=Food_Style()
                        pos=(1,0)
                        #Score
                        score=0
                        last_move_time=time.time()
                elif event.key==K_SPACE:
                    if not game_over:
                        pause=not pause
                ##The following is to prevent the snake from pressing the left key when moving to the right, resulting in gameover
                elif event.key in (K_UP,K_w):
                    if b and not pos[1]: 
                        pos=(0,-1)
                        b=False
                elif event.key in (K_DOWN,K_s):
                    if b and not pos[1]:
                        pos = (0, 1)
                        b = False
                elif event.key in (K_LEFT,K_a):
                    if b and not pos[0]:
                        pos = (-1, 0)
                        b = False
                elif event.key in (K_RIGHT,K_d):
                    if b and not pos[0]:
                        pos = (1, 0)
                        b = False
        #Fill background color
        screen.fill(Back_Ground)
        #Draw grid lines and vertical lines
        for x in range(Size, Screen_Width, Size):
            pygame.draw.line(screen, Black, (x, Area_y[0] * Size), (x, Screen_Height), Line_Width)
        #Draw grid lines and horizontal lines
        for y in range(Area_y[0] * Size, Screen_Height, Size):
            pygame.draw.line(screen, Black, (0, y), (Screen_Width, y), Line_Width)
       #Snake crawling process
        if not game_over:
            curTime=time.time()
            if curTime-last_move_time>speed: 
                if not pause:
                    b=True
                    last_move_time=curTime
                    next_s = (snake[0][0] + pos[0], snake[0][1] + pos[1])
                    #If you eat food
                    if next_s==food:
                        snake.appendleft(next_s)
                        score+=food_style[0]
                        speed = orispeed - 0.03 * (score // 100)
                        food = Creat_Food(snake)
                        food_style = Food_Style()
                    else:
                        #In the area
                        if Area_x[0]<=next_s[0]<=Area_x[1] and Area_y[0]<=next_s[1]<=Area_y[1] and next_s not in snake:
                            snake.appendleft(next_s)
                            snake.pop()
                        else :
                            game_over=True
        #Draw food
        if not game_over:
         '''
        rect(Surface,color,Rect,width=0)
The first parameter specifies which surface object the rectangle is drawn on

The second parameter specifies the color

The third parameter specifies the range of the rectangle (left, top, width, height)

The fourth parameter specifies the size of the rectangle border (0 means to fill the rectangle)

For example, draw three rectangles:

    pygame.draw.rect(screen, BLACK, (50, 50, 150, 50), 0)
    pygame.draw.rect(screen, BLACK, (250, 50, 150, 50), 1)
    pygame.draw.rect(screen, BLACK, (450, 50, 150, 50), 10)
         '''
        #When avoiding game over, the word game over is covered
        pygame.draw.rect(screen, food_style[1], (food[0] * Size, food[1] * Size, Size, Size), 0)
        #Draw a snake
        for s in snake:
            pygame.draw.rect(screen, Dark, (s[0] * Size + Line_Width, s[1] * Size + Line_Width,
                                            Size - Line_Width * 2, Size - Line_Width * 2), 0)
        Print_Txt(screen, font1, 30, 7, f'速度: {score // 100}')
        Print_Txt(screen, font1, 450, 7, f'得分: {score}')
        #Draw gameover
        if game_over:

            if game_start:
                #print('GameOver')
                Print_Txt(screen, font2, (Screen_Width - fwidth) // 2, (Screen_Height - fheight) // 2, 'GAME OVER',Red)
        pygame.display.update()
if __name__=='__main__':
    main()                       
